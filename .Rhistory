c<-eval(parse(text=paste(a, sep = "")))
datx<-mvrnorm(n,mu,cov1)
daty<-mvrnorm(n,mu,a)
pi0<-pi0
probs[i]<-prob.out(datx=datx,daty=daty,psi=psi,psi2=c,m=m,m2=b,pi0=pi0)
cov1
p<-3
n<-20
reps<-100
pr<-.3
m<-3
m2<-3
mu<-rep(0,p)
nums<-rnorm(p^2,0,sqrt(5))
nums2<-rnorm(p^2,0,sqrt(5))
mat<-matrix(nums,nrow = p)
mat2<-matrix(nums2,nrow = p)
psi<-t(mat)%*%mat ###Guarantees non-negative definite
psi2<-diag(p)
choices<-vector(length = reps)
probs<-vector(length = reps)
i<-1
choice<-sample(c(1,2),1,prob = c(pr,1-pr))
choice<-2
cov1<-riwish(m,psi)
cov2<-riwish(m2,psi2)
choices[i]<-choice
a<-ifelse(choice==1,"cov1","cov2")
b<-ifelse(choice==1,m,m2)
a<-eval(parse(text=paste(a, sep = "")))
choices[i]<-choice
c<-ifelse(choice==1,"psi1","psi2")
c<-eval(parse(text=paste(a, sep = "")))
datx<-mvrnorm(n,mu,cov1)
daty<-mvrnorm(n,mu,a)
pi0<-pi0
probs[i]<-prob.out(datx=datx,daty=daty,psi=psi,psi2=c,m=m,m2=b,pi0=pi0)
cov1
cov2
t(datx)%*%datx
t(daty)%*%daty
probs
probs<-random.draw.sim(20,3,1000,0.3,17,17,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
probs<-random.draw.sim(20,3,1000,0.3,17,17,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(20,3,1000,0.3,30,30,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
probs<-random.draw.sim(20,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
probs<-random.draw.sim(3,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(4,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(2,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
probs<-random.draw.sim(2,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(2,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(3,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 50\nmean = 0.45", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 100\nmean = 0.46", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(10,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 200\nmean = 0.50", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(2,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
probs<-random.draw.sim(2,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.36", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(3,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.39", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(3,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.39", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.39", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.39", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.39", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 50\nmean = 0.45", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 50\nmean = 0.60", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(10,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 100\nmean = 0.46", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 50\nmean = 0.60", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(10,3,1000,0.59,3,3,0.5)
hist(probs, main = "n = 100\nmean = 0.46", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(50,3,1000,0.3,3,3,0.5)
hist(probs, main = "n = 200\nmean = 0.50", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 50\nmean = 0.60", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(10,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 100\nmean = 0.46", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 20\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 50\nmean = 0.60", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(10,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 100\nmean = 0.58", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(50,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 200\nmean = 0.50", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
par(mfrow=c(1,4))
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 3\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 5\nmean = 0.60", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(10,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 10\nmean = 0.58", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(50,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 50\nmean = 0.61", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
par(mfrow=c(2,2))
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 3\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 5\nmean = 0.60", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(10,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 10\nmean = 0.58", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(50,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 50\nmean = 0.61", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 3\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
par(mfrow=c(1,1))
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 3\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
par(mfrow=c(1,1))
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 3\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 5\nmean = 0.60", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
par(mfrow=c(1,1))
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 3\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 5\nmean = 0.60", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(10,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 10\nmean = 0.58", xlab="P(H0|Data)")
mean(probs)
set.seed(624)
par(mfrow=c(1,1))
probs<-random.draw.sim(3,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 3\nmean = 0.59", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(5,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 5\nmean = 0.60", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(10,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 10\nmean = 0.58", xlab="P(H0|Data)")
mean(probs)
probs<-random.draw.sim(50,3,1000,0.6,3,3,0.5)
hist(probs, main = "n = 50\nmean = 0.61", xlab="P(H0|Data)")
mean(probs)
sigma()
mu<-rep(0,p)
nums<-rnorm(p^2,0,sqrt(2))
nums2<-rnorm(p^2,0,sqrt(2))
mat<-matrix(nums,nrow = p)
mat2<-matrix(nums2,nrow = p)
psi<-t(mat)%*%mat ###Guarantees non-negative definite
psi2<-diag(p)
choices<-vector(length = 1)
probs<-vector(length = 1)
i<-1
choice<-sample(c(1,2),1,prob = c(pr,1-pr))
choice<-2
cov1<-riwish(m,psi)
cov2<-riwish(m2,psi2)
choices[i]<-choice
a<-ifelse(choice==1,"cov1","cov2")
b<-ifelse(choice==1,m,m2)
a<-eval(parse(text=paste(a, sep = "")))
choices[i]<-choice
c<-ifelse(choice==1,"psi1","psi2")
c<-eval(parse(text=paste(a, sep = "")))
datx<-mvrnorm(n,mu,cov1)
daty<-mvrnorm(n,mu,a)
pi0<-pi0
probs[i]<-prob.out(datx=datx,daty=daty,psi=psi,psi2=c,m=m,m2=b,pi0=pi0)
cov1
cov2
t(datx)%*%datx
t(daty)%*%daty
datx<-mvrnorm(n,mu,cov1)
datx
t(x)%*%x
t(datx)%*%x
t(datx)%*%datxx
t(datx)%*%datx
?mvrnorm
datx<-mvrnorm(10,rep(0,3),psi)
datx
t(datx)%*%datx
center(datx)
a<-scale(datx,scale = FALSE)
t(a)%*%a
psi
library(MASS)
library(mvtnorm)
library(MCMCpack)
pgamma<-function(x,p){
a<-log(pi^((p*(p-1))/4))
v<-vector(length=p)
for (i in 1:p){
v[i]<-lgamma(x+((1-i)/2))
}
g<-sum(v)
out<-a+g
return(out)
}
matrix.t.dens<-function(x,nu,n,p,omega){
out<-pgamma((nu+n+p-1)/2,p)-(((n*p)/2)*log(pi)+pgamma((nu+p-1)/2,p))+(-n/2)*log(det(omega))+(-(nu+n+p-1)/2)*log(det(diag(n)+x%*%solve(omega)%*%t(x)))
return(out)
}
prob.out<- function(datx,daty,psi,m,pi0){
p<-ncol(datx)
nx<-nrow(datx)
ny<-nrow(daty)
densx<-matrix.t.dens(x=datx,nu=m-p+1,n=nx,p=p,omega = psi)
densy<-matrix.t.dens(x=daty,nu=m-p+1,n=ny,p=p,omega = psi)
densxy<-matrix.t.dens(x=rbind(datx,daty),nu=m-p+1,n=nx+ny,p=p,omega = psi)
out<- 1/(1+exp(densx+densy+log(1-pi0)-densxy-log(pi0)))
return(out)
}
#####Simulate Data - let's do p=10 (10 genes)
##### First let's generate x and y from same sigma
p<-3
n<-20
reps<-1000
pr<-.3
m<-3
m2<-3
random.draw.sim<-function(n,p,reps,pr,m,pi0){
mu<-rep(0,p)
nums<-rnorm(p^2,0,sqrt(2))
mat<-matrix(nums,nrow = p)
psi<-t(mat)%*%mat ###Guarantees non-negative definite
probs<-vector(length = reps)
for (i in 1:reps){
choice<-sample(c(1,2),1,prob = c(pr,1-pr))
cov1<-riwish(m,psi)
cov2<-riwish(m,psi)
choices[i]<-choice
a<-ifelse(choice==1,"cov1","cov2")
a<-eval(parse(text=paste(a, sep = "")))
choices[i]<-choice
c<-ifelse(choice==1,"psi1","psi2")
c<-eval(parse(text=paste(a, sep = "")))
datx<-mvrnorm(n,mu,cov1)
daty<-mvrnorm(n,mu,a)
pi0<-pi0
probs[i]<-prob.out(datx=datx,daty=daty,psi=psi,psi2=c,m=m,pi0=pi0)
}
return(probs)
}
probs<-random.draw.sim(20,p,1000,.5,p,.5)
library(MASS)
library(mvtnorm)
library(MCMCpack)
pgamma<-function(x,p){
a<-log(pi^((p*(p-1))/4))
v<-vector(length=p)
for (i in 1:p){
v[i]<-lgamma(x+((1-i)/2))
}
g<-sum(v)
out<-a+g
return(out)
}
matrix.t.dens<-function(x,nu,n,p,omega){
out<-pgamma((nu+n+p-1)/2,p)-(((n*p)/2)*log(pi)+pgamma((nu+p-1)/2,p))+(-n/2)*log(det(omega))+(-(nu+n+p-1)/2)*log(det(diag(n)+x%*%solve(omega)%*%t(x)))
return(out)
}
prob.out<- function(datx,daty,psi,m,pi0){
p<-ncol(datx)
nx<-nrow(datx)
ny<-nrow(daty)
densx<-matrix.t.dens(x=datx,nu=m-p+1,n=nx,p=p,omega = psi)
densy<-matrix.t.dens(x=daty,nu=m-p+1,n=ny,p=p,omega = psi)
densxy<-matrix.t.dens(x=rbind(datx,daty),nu=m-p+1,n=nx+ny,p=p,omega = psi)
out<- 1/(1+exp(densx+densy+log(1-pi0)-densxy-log(pi0)))
return(out)
}
#####Simulate Data - let's do p=10 (10 genes)
##### First let's generate x and y from same sigma
p<-3
n<-20
reps<-1000
pr<-.3
m<-3
m2<-3
random.draw.sim<-function(n,p,reps,pr,m,pi0){
mu<-rep(0,p)
nums<-rnorm(p^2,0,sqrt(2))
mat<-matrix(nums,nrow = p)
psi<-t(mat)%*%mat ###Guarantees non-negative definite
probs<-vector(length = reps)
for (i in 1:reps){
choice<-sample(c(1,2),1,prob = c(pr,1-pr))
cov1<-riwish(m,psi)
cov2<-riwish(m,psi)
choices[i]<-choice
a<-ifelse(choice==1,"cov1","cov2")
a<-eval(parse(text=paste(a, sep = "")))
choices[i]<-choice
c<-ifelse(choice==1,"psi1","psi2")
c<-eval(parse(text=paste(a, sep = "")))
datx<-mvrnorm(n,mu,cov1)
daty<-mvrnorm(n,mu,a)
pi0<-pi0
probs[i]<-prob.out(datx=datx,daty=daty,psi=psi,m=m,pi0=pi0)
}
return(probs)
}
probs<-random.draw.sim(20,p,1000,.5,p,.5)
hist(probs)
mean(probs)
probs<-random.draw.sim(20,p,1000,.5,10,.5)
probs<-random.draw.sim(20,p,1000,.5,10,.5)
hist(probs)
probs<-random.draw.sim(20,p,1000,.5,15,.5)
hist(probs)
mean(probs)
probs<-random.draw.sim(200,p,1000,.5,15,.5)
hist(probs)
mean(probs)
probs<-random.draw.sim(200,p,1000,.5,200,.5)
hist(probs)
mean(probs)
probs<-random.draw.sim(200,p,1000,.5,50,.5)
hist(probs)
mean(probs)
prob.out<- function(datx,daty,psi,m,pi0){
p<-ncol(datx)
nx<-nrow(datx)
ny<-nrow(daty)
densx<-matrix.t.dens(x=datx,nu=m-p+1,n=nx,p=p,omega = psi)
densy<-matrix.t.dens(x=daty,nu=m-p+1,n=ny,p=p,omega = psi)
densxy<-matrix.t.dens(x=rbind(datx,daty),nu=m-p+1,n=nx+ny,p=p,omega = psi)
out<- 1/(1+exp(densx+densy+log(1-pi0)-densxy-log(pi0)))
return(out)
}
#####Simulate Data - let's do p=10 (10 genes)
##### First let's generate x and y from same sigma
p<-3
n<-20
reps<-1000
pr<-.3
m<-3
m2<-3
random.draw.sim<-function(n,p,reps,pr,m,pi0){
mu<-rep(0,p)
nums<-rnorm(p^2,0,sqrt(10))
mat<-matrix(nums,nrow = p)
psi<-t(mat)%*%mat ###Guarantees non-negative definite
probs<-vector(length = reps)
for (i in 1:reps){
choice<-sample(c(1,2),1,prob = c(pr,1-pr))
cov1<-riwish(m,psi)
cov2<-riwish(m,psi)
choices[i]<-choice
a<-ifelse(choice==1,"cov1","cov2")
a<-eval(parse(text=paste(a, sep = "")))
choices[i]<-choice
c<-ifelse(choice==1,"psi1","psi2")
c<-eval(parse(text=paste(a, sep = "")))
datx<-mvrnorm(n,mu,cov1)
daty<-mvrnorm(n,mu,a)
pi0<-pi0
probs[i]<-prob.out(datx=datx,daty=daty,psi=psi,m=m,pi0=pi0)
}
return(probs)
}
probs<-random.draw.sim(200,p,1000,.5,50,.5)
hist(probs)
probs<-random.draw.sim(200,p,1000,.3,50,.5)
hist(probs)
mean(probs)
probs<-random.draw.sim(200,p,1000,.3,50,.8)
hist(probs)
mean(probs)
probs<-random.draw.sim(500,p,1000,.3,50,.8)
library(devtools)
install_github("jaredhuling/personalized")
library(personalized)
?fit.subgroup
set.seed(123)
n.obs  <- 1000
n.vars <- 50
x <- matrix(rnorm(n.obs * n.vars, sd = 3), n.obs, n.vars)
# simulate non-randomized treatment
xbetat   <- 0.5 + 0.5 * x[,21] - 0.5 * x[,41]
trt.prob <- exp(xbetat) / (1 + exp(xbetat))
trt01    <- rbinom(n.obs, 1, prob = trt.prob)
trt      <- 2 * trt01 - 1
library(personalized)
set.seed(123)
n.obs  <- 1000
n.vars <- 50
x <- matrix(rnorm(n.obs * n.vars, sd = 3), n.obs, n.vars)
# simulate non-randomized treatment
xbetat   <- 0.5 + 0.25 * x[,21] - 0.25 * x[,41]
trt.prob <- exp(xbetat) / (1 + exp(xbetat))
trt      <- rbinom(n.obs, 1, prob = trt.prob)
# simulate delta
delta <- (0.5 + x[,2] - 0.5 * x[,3] - 1 * x[,11] + 1 * x[,1] * x[,12] )
# simulate main effects g(X)
xbeta <- x[,1] + x[,11] - 2 * x[,12]^2 + x[,13] + 0.5 * x[,15] ^ 2
xbeta <- xbeta + delta * (2 * trt - 1)
# simulate continuous outcomes
y <- drop(xbeta) + rnorm(n.obs)
# create function for fitting propensity score model
prop.func <- function(x, trt)
{
# fit propensity score model
propens.model <- cv.glmnet(y = trt,
x = x,
family = "binomial")
pi.x <- predict(propens.model, s = "lambda.min",
newx = x, type = "response")[,1]
pi.x
}
check.overlap(x, trt, prop.func)
subgrp.model <- fit.subgroup(x = x, y = y,
trt = trt,
propensity.func = prop.func,
loss   = "sq_loss_lasso",
nfolds = 10)              # option for cv.glmnet
summary(subgrp.model)
setwd("~/Document/Repos/jmm.funcs")
document()
setwd("~/Documents/Repos/jmm.funcs")
document()
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("~/Documents/Repos/jmm.funcs")
document()
install_github("jmmaronge/jmm.funcs
")
library("devtools")
devtools::install_github("jmmaronge/jmm.funcs")
?multiplot
devtools::install_github("rstudio/blogdown")
blogdown::install_hugo()
